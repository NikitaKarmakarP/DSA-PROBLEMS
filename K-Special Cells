**QUESTION**
Problem
 

You are given a 
N
×
M
 matrix which has K special cells in it. You have to reach 
(
N
,
M
)
 from 
(
1
,
1
)
. From any cell, you can only move rightwards or downwards.
The 
K
−
s
p
e
c
i
a
l
 cells are those cells in this grid which have special strength at them. 
i
t
h
 special cell has 
P
[
i
]
 units of strength and if you travel through this cell, you store the strength.
Find the total strength you can store after travelling through all the possible paths in the grid to reach cell 
(
N
,
M
)
.

Note:
The strength of a path is the sum of strength 
P
[
i
]
 of all the special cells that are visited in this path.
The cells that are not special have power quotient equals to zero.
 

Input format

The first line contains the total number of test cases denoted by T.
The first line of each test case contains three space separated integers N, M and K where N x M is the size of grid and K is the total number of special cells in the grid.
Each of next K lines contains X[i], Y[i], and P[i] where (X[i],Y[i]) is the location of special cell and P[i] is the cell strength.
 

 

Output format

For each test case, print in a new line a single integer representing the total strength that you can store, as the total strength can be too large, print it modulo 
10
9
+
7
.
 

Constraints

1
≤
T
≤
3
1
≤
N
,
M
,
P
[
i
]
≤
10
5
1
≤
X
[
i
]
≤
N
1
≤
Y
[
i
]
≤
M
1
≤
K
≤
10
6
 

Sample Input
1
2 2 2
1 2 4
2 1 7
Sample Output
11
Time Limit: 1
Memory Limit: 256
Source Limit:
Explanation
Total Power that can be collected is 11, as there are only two possible paths in grid of size 2x2 and total power we can collect by traveling through both of these paths is 11.


**ANSWER**

#include <iostream>
#include <vector>

using namespace std;

const int MOD = 1e9 + 7;
const int MAX = 200005; // since n, m <= 1e5 and we need up to n + m

vector<long long> fact(MAX), inv_fact(MAX);

// Fast power for modular inverse
long long power(long long a, long long b) {
    long long res = 1;
    while (b) {
        if (b % 2)
            res = (res * a) % MOD;
        a = (a * a) % MOD;
        b /= 2;
    }
    return res;
}

// Precompute factorial and inverse factorial
void precompute() {
    fact[0] = 1;
    for (int i = 1; i < MAX; ++i) {
        fact[i] = (fact[i - 1] * i) % MOD;
    }
    inv_fact[MAX - 1] = power(fact[MAX - 1], MOD - 2);
    for (int i = MAX - 2; i >= 0; --i) {
        inv_fact[i] = (inv_fact[i + 1] * (i + 1)) % MOD;
    }
}

// nCr % MOD
long long nCr(int n, int r) {
    if (r < 0 || r > n) return 0;
    return fact[n] * inv_fact[r] % MOD * inv_fact[n - r] % MOD;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    precompute();

    int T;
    cin >> T;
    while (T--) {
        int N, M, K;
        cin >> N >> M >> K;

        long long total_strength = 0;

        for (int i = 0; i < K; ++i) {
            int x, y, p;
            cin >> x >> y >> p;

            // Paths from (1,1) to (x,y)
            long long left_paths = nCr(x + y - 2, x - 1);
            // Paths from (x,y) to (N,M)
            long long right_paths = nCr((N - x) + (M - y), N - x);

            long long total_paths = (left_paths * right_paths) % MOD;
            total_strength = (total_strength + (total_paths * p) % MOD) % MOD;
        }

        cout << total_strength << '\n';
    }

    return 0;
}
