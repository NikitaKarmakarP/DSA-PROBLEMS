**QUESTION**

Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where:

0 <= i < j < nums.length and
nums[i] > 2 * nums[j].
 

Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1
Example 2:

Input: nums = [2,4,3,5,1]
Output: 3
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1
(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1
 

Constraints:

1 <= nums.length <= 5 * 104
-231 <= nums[i] <= 231 - 1

**ANSWER**

class Solution 
{
    int get_pairs(vector<int>& vct , long long int x)
    {
        //sort(vct.begin() , vct.end());
        int size = vct.size();
        int low = 0;
        int high = size - 1;
        int ans = -1;
        while(low <= high)
        {
            int mid = high - (high - low) / 2;
            int ele = vct[mid];
            if(ele > x)
            {
                ans = mid;
                high = mid - 1;
            }
            else
            {
                low = mid  + 1;
            }
        }
        if(ans == -1) return 0;
        return vct.size() - ans;
    }

    // void print_vector(vector<int>& nums)
    // {
    //     cout<<endl;
    //     for(auto it : nums)
    //     {
    //         cout<<" "<<it;
    //     }
    //     cout<<endl;
    // }

public:
    int reversePairs(vector<int>& nums) 
    {
        vector<int> vct;
        int counter = 0;
        for(auto it : nums)
        {
            long long int x = 1LL * 2 * it;
            counter += get_pairs(vct , x);
            int low = 0;
            int high = vct.size();
            int ans = vct.size();
            while(low < high)
            {
                int mid = low + (high - low) / 2;
                if(vct[mid] >= it)
                {
                    ans = mid;
                    high = mid;
                }
                else
                {
                    low = mid + 1;
                }
            }
            vct.insert(vct.begin() + ans , it);
            //print_vector(vct);
        }

        return counter;
    }
};
